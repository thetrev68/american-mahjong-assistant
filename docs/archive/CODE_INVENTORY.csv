Name,Type,File,Line,Parameters/Properties,Description
"NMJL2025Pattern","interface","shared/nmjl-types.ts","20","Year; Section; Line; Pattern ID; Hands_Key; Hand_Pattern; Hand_Description; Hand_Points; Hand_Conceiled; Hand_Difficulty; Hand_Notes; Groups","Core interface for NMJL 2025 patterns with all official pattern data"
"PatternSelectionOption","interface","shared/nmjl-types.ts","35","id; patternId; displayName; pattern; points; difficulty; description; section; line; allowsJokers; concealed; groups","Processed pattern data for UI selection components"
"Tile","interface","shared/tile-utils.ts","7","id; suit; value; isJoker?","Core tile representation with suit; value; and optional joker flag"
"createAllTiles","function","shared/tile-utils.ts","21","","Creates complete set of all available tiles for selection"
"validateTileCollection","function","shared/tile-utils.ts","155","tiles: Tile[]; playerPosition?: PlayerPosition","Validates tile collection with position-aware logic"
"sortTiles","function","shared/tile-utils.ts","200","tiles: Tile[]","Sorts tiles for consistent display by suit then value"
"usePatternStore","store","frontend/src/stores/pattern-store.ts","54","patterns; selectionOptions; isLoading; error; selectedPatternId; targetPatterns; searchQuery; difficultyFilter; pointsFilter; jokerFilter; sectionFilter; patternProgress","Zustand store for NMJL pattern data and user selection state"
"useTileStore","store","frontend/src/stores/tile-store.ts","84","playerHand; handSize; dealerHand; exposedTiles; selectedForAction; tileStates; selectedCount; showAnimations; sortBy; recommendations; analysisInProgress; lastAnalysis","Zustand store for hand management and tile input state"
"useGameStore","store","frontend/src/stores/game-store.ts","105","gamePhase; roomCode; players; currentPlayer; isHost; gameSettings; gameState; connectionStatus","Main Zustand store for core game state management"
"useCharlestonStore","store","frontend/src/stores/charleston-store.ts","111","currentPhase; roundNumber; passDirection; selectedTiles; receivedTiles; allPlayersReady; passHistory; recommendations; phaseProgress","Zustand store for Charleston phase management and tile passing"
"useIntelligenceStore","store","frontend/src/stores/intelligence-store.ts","197","handAnalysis; patternRecommendations; tileRecommendations; strategicAdvice; threats; analysisVersion; lastAnalysisTime; analysisInProgress","Zustand store for AI analysis and recommendations"
"useRoomStore","store","frontend/src/stores/room-store.ts","151","roomCode; currentPlayer; isHost; players; roomSettings; setupProgress; hostPermissions; crossPhasePlayerState; connectionStatus","Zustand store for room setup and multiplayer coordination"
"useTurnStore","store","frontend/src/stores/turn-store.ts","138","currentTurn; turnOrder; turnHistory; turnTimer; isPlayerTurn; canPerformAction; pendingActions; turnMetrics","Zustand store for turn-based gameplay management"
"useUIStore","store","frontend/src/stores/ui-store.ts","42","theme; animationsEnabled; soundEnabled; skillLevel; tutorialCompleted; showTooltips; reducedMotion","Zustand store for UI preferences and user settings"
"useHistoryStore","store","frontend/src/stores/history-store.ts","233","completedGames; currentGame; performanceStats; learningRecommendations; selectedGameId","Zustand store for game history and performance tracking"
"useTutorialStore","store","frontend/src/stores/tutorial-store.ts","46","progress; preferences; demoState; isCompleted","Zustand store for tutorial progress and user learning"
"useMultiplayerStore","store","frontend/src/stores/multiplayer-store.ts","60","isConnected; socket; error; reconnectAttempts","Zustand store for multiplayer connection state"
"AnalysisEngine","class","frontend/src/services/analysis-engine.ts","22","analyzeHand; clearCacheForHandChange; getCacheStats; generateCacheKey; getEngine1Facts; manageCacheSize; convertToHandAnalysis; normalizeAction; generatePatternReasoning; extractMatchingGroups; extractTilePriorities; extractGroupPriorities","Main interface for 3-engine intelligence system coordinating pattern analysis; ranking; and tile recommendations"
"PatternAnalysisEngine","service","frontend/src/services/pattern-analysis-engine.ts","","analyzePatterns; analyzePattern; getPatternVariations; matchTilesToVariation; calculateTileMatching; assessJokerUsage; validateConstraints","Engine 1: Mathematical pattern analysis with 1;002 pattern variations"
"PatternRankingEngine","service","frontend/src/services/pattern-ranking-engine.ts","","rankPatterns; calculateComponents; generateRecommendation; assessRiskFactors; calculateStrategicValue","Engine 2: 4-component pattern scoring system (0-40; 0-30; 0-20; 0-10)"
"TileRecommendationEngine","service","frontend/src/services/tile-recommendation-engine.ts","","generateRecommendations; analyzeTileActions; assessKeepValue; assessPassValue; assessDiscardValue; generateStrategicAdvice","Engine 3: Keep/pass/discard recommendations with opponent analysis"
"nmjlService","service","frontend/src/services/nmjl-service.ts","","loadPatterns; getAllPatterns; getSelectionOptions; getPatternById; getPatternsBySection; getPatternsByDifficulty; validatePatternData","Service for loading and managing NMJL 2025 pattern data"
"tileService","service","frontend/src/services/tile-service.ts","","createPlayerTile; validateHand; sortTiles; getTilesGroupedBySuit; analyzeTileFrequency; findTileMatches","Service for tile creation; validation; and manipulation"
"useAnimations","hook","frontend/src/hooks/useAnimations.ts","38","","Hook for managing tile and game animations with performance optimization"
"useHapticFeedback","hook","frontend/src/hooks/useHapticFeedback.ts","60","","Hook for haptic feedback on mobile devices with contextual patterns"
"usePerformance","hook","frontend/src/hooks/usePerformance.ts","62","","Hook for performance monitoring and optimization with metrics tracking"
"useCoPilotMode","hook","frontend/src/hooks/useCoPilotMode.ts","36","","Hook for managing co-pilot mode selection and configuration"
"useConnectionResilience","hook","frontend/src/hooks/useConnectionResilience.ts","52","config: ConnectionResilienceConfig","Hook for connection resilience and automatic reconnection with exponential backoff"
"useSocket","hook","frontend/src/hooks/useSocket.ts","18","options: { autoConnect?: boolean }","Hook for WebSocket connection with automatic reconnection and health monitoring"
"useMultiplayer","hook","frontend/src/hooks/useMultiplayer.ts","23","","Hook for multiplayer room management and coordination"
"useRoomSetup","hook","frontend/src/hooks/useRoomSetup.ts","29","","Hook for room creation and joining with validation"
"useTutorial","hook","frontend/src/hooks/useTutorial.ts","164","","Hook for tutorial system with progressive learning flow"
"useTileSprites","hook","frontend/src/hooks/useTileSprites.ts","32","","Hook for tile sprite management and rendering optimization"
"useAccessibility","hook","frontend/src/hooks/useAccessibility.ts","22","","Hook for accessibility features including screen reader support"
"useShare","hook","frontend/src/hooks/useShare.ts","18","","Hook for sharing game results and room codes"
"useGameHistory","hook","frontend/src/hooks/useGameHistory.ts","29","","Hook for tracking and analyzing game performance history"
"GameModeView","component","frontend/src/features/gameplay/GameModeView.tsx","58","","Main game mode interface with real-time co-pilot assistance during gameplay"
"PatternSelectionPage","component","frontend/src/features/pattern-selection/PatternSelectionPage.tsx","13","","Pattern selection interface with filtering and search capabilities"
"TileInputPage","component","frontend/src/features/tile-input/TileInputPage.tsx","14","","Tile input interface for hand management and validation"
"CharlestonView","component","frontend/src/features/charleston/CharlestonView.tsx","","","Charleston phase interface with AI-powered passing recommendations"
"TutorialView","component","frontend/src/features/tutorial/TutorialView.tsx","19","","Tutorial orchestrator with progressive learning flow and skill assessment"
"RoomSetupView","component","frontend/src/features/room-setup/RoomSetupView.tsx","","","Room creation and joining interface with multiplayer coordination"
"PatternCard","component","frontend/src/features/pattern-selection/PatternCard.tsx","18","","Interactive pattern card with visual indicators for difficulty; points; and jokers"
"HandDisplay","component","frontend/src/features/tile-input/HandDisplay.tsx","17","","Player hand display with tile selection and animation support"
"TileSelector","component","frontend/src/features/tile-input/TileSelector.tsx","19","","Tile selection interface organized by suit with search capabilities"
"AnimatedTile","component","frontend/src/ui-components/tiles/AnimatedTile.tsx","30","","Animated tile component with contextual effects and performance optimization"
"TileSprite","component","frontend/src/ui-components/TileSprite.tsx","22","","Base tile rendering component with sprite-based display"
"PatternGrid","component","frontend/src/features/pattern-selection/PatternGrid.tsx","10","","Grid display for pattern cards with responsive layout"
"IntelligencePanel","component","frontend/src/features/gameplay/IntelligencePanel.tsx","","","AI recommendations panel with pattern analysis and tile suggestions"
"Button","component","frontend/src/ui-components/Button.tsx","","","Modern button component with variants and accessibility support"
"Card","component","frontend/src/ui-components/Card.tsx","","","Glassmorphism card component with blur effects and subtle borders"
"LoadingSpinner","component","frontend/src/ui-components/LoadingSpinner.tsx","","","Loading spinner with animation and accessibility support"
"RouteGuard","component","frontend/src/utils/RouteGuard.tsx","11","","Route protection component preventing access to features before proper setup"
"getTileDisplayChar","function","frontend/src/utils/tile-display-utils.ts","17","tileId: string","Converts tile ID to display character with Unicode symbols"
"getColoredPatternParts","function","frontend/src/utils/pattern-color-utils.ts","18","pattern: string; groups: PatternGroup[]","Applies color coding to pattern parts based on groups"
"withReducedMotion","function","frontend/src/utils/reduced-motion.ts","56","config: T","Applies reduced motion preferences to animation configurations"
"createAccessibleAnimation","function","frontend/src/utils/reduced-motion.ts","118","config: AnimationConfig","Creates accessible animation with reduced motion support"
"GameLogicService","class","backend/src/services/game-logic.ts","66","validateAction; processAction; updateGameState; checkWinCondition; handleDiscard; handleCall","Backend service for game logic validation and processing"
"MahjongValidationBridge","class","backend/src/services/mahjong-validation-bridge.ts","39","validateHand; validateMahjong; calculateScore; checkPatternMatch","Bridge service for mahjong rule validation and scoring"
"StateSyncManager","class","backend/src/features/state-sync/state-sync-manager.ts","25","syncState; resolveConflicts; broadcastUpdate; validateUpdate","Manages state synchronization across multiplayer clients"
"SocketHandlers","class","backend/src/features/socket-communication/socket-handlers.ts","11","handleConnection; handleDisconnection; handleRoomJoin; handleRoomLeave; handleGameAction; handleChatMessage","Socket.IO event handlers for client-server communication"
"RoomManager","class","backend/src/features/room-lifecycle/room-manager.ts","4","createRoom; joinRoom; leaveRoom; deleteRoom; getRoomInfo; updateRoomSettings","Manages room lifecycle and player coordination"
"PlayerCoordinationManager","class","backend/src/features/room-management/player-coordination-manager.ts","48","addPlayer; removePlayer; updatePlayerState; broadcastToRoom; handlePlayerAction","Coordinates player actions and state across multiplayer sessions"
"RoomLifecycleManager","class","backend/src/features/room-management/room-lifecycle-manager.ts","21","initializeRoom; startGame; endGame; handlePhaseTransition; cleanupRoom","Manages room lifecycle from creation to cleanup"
"Player","interface","backend/src/types/room-types.ts","3","id; name; position; isHost; isReady; connectionStatus","Backend player data structure for multiplayer coordination"
"Room","interface","backend/src/types/room-types.ts","20","id; code; host; players; config; state; createdAt","Backend room data structure with configuration and state"
"GameState","interface","backend/src/types/sync-types.ts","23","phase; currentPlayer; turnNumber; wall; discardPile; exposedTiles; gameTimer","Backend game state for synchronization across clients"
"StateUpdate","interface","backend/src/types/sync-types.ts","41","type; playerId; timestamp; data; sequenceNumber","State update message for multiplayer synchronization"
"TileAnimationContext","type","frontend/src/ui-components/tiles/animation-utils.ts","8","'charleston' | 'gameplay' | 'analysis' | 'selection'","Context type for tile animations based on game phase"
"HandDifficulty","type","shared/nmjl-types.ts","6","'easy' | 'medium' | 'hard'","Difficulty classification for NMJL patterns"
"TileSuit","type","shared/tile-utils.ts","5","'dots' | 'bams' | 'cracks' | 'winds' | 'dragons' | 'flowers' | 'jokers'","Tile suit enumeration for all mahjong tiles"
"PlayerPosition","type","shared/tile-utils.ts","14","'east' | 'south' | 'west' | 'north'","Player seating positions in mahjong game"
"ConstraintType","type","shared/nmjl-types.ts","4","'kong' | 'pung' | 'sequence' | 'pair' | 'single' | 'consecutive' | 'like'","Pattern constraint types for NMJL validation"
"TileRecommendationType","type","frontend/src/ui-components/tiles/animation-utils.ts","9","'keep' | 'pass' | 'discard' | 'joker'","Recommendation types for tile actions"
"SkillLevel","type","frontend/src/features/tutorial/types.ts","4","'beginner' | 'intermediate' | 'expert'","User skill level classification for tutorial personalization"
"TutorialSection","type","frontend/src/features/tutorial/types.ts","6","'basics' | 'patterns' | 'charleston' | 'gameplay' | 'strategy' | 'multiplayer'","Tutorial section categories for progressive learning"
"PatternProgress","interface","shared/nmjl-types.ts","50","patternId; completionPercentage; tilesNeeded; completingTiles; canUseJokers; jokersNeeded","Pattern completion progress tracking interface"
"PatternGroup","interface","shared/nmjl-types.ts","8","Group; Suit_Role; Suit_Note; Constraint_Type; Constraint_Values; Constraint_Must_Match; Constraint_Extra; Jokers_Allowed; display_color","Pattern group definition for NMJL pattern structure"
"TILE_KEYFRAMES","constant","frontend/src/ui-components/tiles/tile-animation-constants.ts","5","","CSS keyframe definitions for tile animations"
"TILE_STATES","constant","frontend/src/features/gameplay/TileStates.tsx","4","","Tile state definitions for gameplay UI"
"router","constant","frontend/src/utils/router.tsx","12","","React Router configuration for application routing"