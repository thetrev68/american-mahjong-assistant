REPLACE lines 36-45:

export const RoomSetupView: React.FC = () => {
  const navigate = useNavigate()
  const roomSetup = useRoomSetup()
  const roomSetupStore = useRoomSetupStore()
  // Only select DATA (not functions) to prevent infinite re-renders from new function references
  const currentRoom = useMultiplayerStore((s) => s.currentRoom)
  const currentPlayerId = useMultiplayerStore((s) => s.currentPlayerId)
  const gameActions = useGameStore((state) => state.actions)
  const playerStore = usePlayerStore()
  const socket = useSocketContext()

WITH:

export const RoomSetupView: React.FC = () => {
  const navigate = useNavigate()
  const roomSetup = useRoomSetup()

  // Use direct store selectors - ONLY primitives, NO objects or functions
  const coPilotMode = useRoomStore((s) => s.setup.mode)
  const roomCreationStatus = useRoomStore((s) => s.roomCreationStatus)

  const currentRoom = useMultiplayerStore((s) => s.currentRoom)
  const currentPlayerId = useMultiplayerStore((s) => s.currentPlayerId)
  const gameActions = useGameStore((state) => state.actions)
  const socket = useSocketContext()

THEN REPLACE all instances of:
- `roomSetupStore.coPilotMode` with `coPilotMode`
- `roomSetupStore.roomCreationStatus` with `roomCreationStatus`
- `roomSetupStore.resetToStart()` with `useRoomStore.getState().actions.clearAll()`
- `roomSetupStore.resetCoPilotModeSelection()` with `useRoomStore.getState().actions.setMode('solo'); useRoomStore.setState(s => ({ setup: { ...s.setup, coPilotModeSelected: false }}))`
- `roomSetupStore.setRoomCreationStatus('idle')` with `useRoomStore.getState().actions.setRoomCreationStatus('idle')`
- `roomSetupStore.clearError()` with `useRoomStore.getState().actions.clearError()`
- `roomSetupStore.setCoPilotMode(roomSetup.coPilotMode)` with `useRoomStore.getState().actions.setMode(roomSetup.coPilotMode)`
- `roomSetupStore.updateCoPilotMode` with `useRoomStore.getState().actions.setMode`
- `playerStore.clearPlayerData()` with `useRoomStore.setState({ playerPositions: {}, currentPlayerId: null })`
- `playerStore.setPlayerPosition(id, pos)` with `useRoomStore.setState(s => ({ playerPositions: { ...s.playerPositions, [id]: pos }}))`

REMOVE imports:
- import { useRoomSetupStore } from '../../stores/room-setup.store'
- import { usePlayerStore } from '../../stores/player.store'
